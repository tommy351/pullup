// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/tommy351/pullup/cmd"
	"github.com/tommy351/pullup/pkg/k8s"
	"github.com/tommy351/pullup/pkg/log"
	"github.com/tommy351/pullup/pkg/metrics"
	"github.com/tommy351/pullup/pkg/webhook"
	"github.com/tommy351/pullup/pkg/webhook/github"
)

// Injectors from wire.go:

func InitializeManager(conf Config) (*Manager, func(), error) {
	config := NewConfig(conf)
	k8sConfig := cmd.NewKubernetesConfig(config)
	restConfig, err := k8s.LoadConfig(k8sConfig)
	if err != nil {
		return nil, nil, err
	}
	scheme, err := k8s.NewScheme()
	if err != nil {
		return nil, nil, err
	}
	manager, err := NewControllerManager(restConfig, scheme)
	if err != nil {
		return nil, nil, err
	}
	webhookConfig := NewWebhookConfig(conf)
	encoderConfig := log.NewEncoderConfig()
	logConfig := cmd.NewLogConfig(config)
	atomicLevel, err := log.NewZapLevel(logConfig)
	if err != nil {
		return nil, nil, err
	}
	encoder, err := log.NewEncoder(encoderConfig, atomicLevel)
	if err != nil {
		return nil, nil, err
	}
	writeSyncer, cleanup, err := log.NewSink()
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2 := log.NewZapLogger(encoder, atomicLevel, writeSyncer)
	logrLogger := log.NewLogger(logger)
	githubConfig := NewGitHubConfig(conf)
	handler, err := github.NewHandler(githubConfig, manager)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server := webhook.NewServer(webhookConfig, logrLogger, handler)
	metricsServer := metrics.NewServer(logrLogger)
	mainManager, err := NewManager(manager, server, metricsServer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return mainManager, func() {
		cleanup2()
		cleanup()
	}, nil
}
