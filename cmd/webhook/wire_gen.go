// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/tommy351/pullup/cmd"
	"github.com/tommy351/pullup/internal/controller"
	"github.com/tommy351/pullup/internal/k8s"
	"github.com/tommy351/pullup/internal/log"
	"github.com/tommy351/pullup/internal/metrics"
	"github.com/tommy351/pullup/internal/webhook"
	"github.com/tommy351/pullup/internal/webhook/github"
	"github.com/tommy351/pullup/internal/webhook/hookutil"
	"github.com/tommy351/pullup/internal/webhook/http"
)

// Injectors from wire.go:

func InitializeManager(conf Config) (*Manager, func(), error) {
	config := NewConfig(conf)
	k8sConfig := cmd.NewKubernetesConfig(config)
	restConfig, err := k8s.LoadConfig(k8sConfig)
	if err != nil {
		return nil, nil, err
	}
	scheme, err := k8s.NewScheme()
	if err != nil {
		return nil, nil, err
	}
	manager, err := NewControllerManager(restConfig, scheme)
	if err != nil {
		return nil, nil, err
	}
	webhookConfig := conf.Webhook
	encoderConfig := log.NewEncoderConfig()
	logConfig := cmd.NewLogConfig(config)
	atomicLevel, err := log.NewZapLevel(logConfig)
	if err != nil {
		return nil, nil, err
	}
	encoder, err := log.NewEncoder(encoderConfig, atomicLevel)
	if err != nil {
		return nil, nil, err
	}
	writeSyncer, cleanup, err := log.NewSink()
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2 := log.NewZapLogger(encoder, atomicLevel, writeSyncer)
	logrLogger := log.NewLogger(logger)
	githubConfig := conf.GitHub
	client := controller.NewClient(manager)
	eventRecorder := hookutil.NewEventRecorder(manager)
	fieldIndexer := hookutil.NewFieldIndexer(manager)
	resourceTemplateClient := hookutil.ResourceTemplateClient{
		Client:   client,
		Recorder: eventRecorder,
	}
	handler := &github.Handler{
		Config:                 githubConfig,
		Client:                 client,
		Recorder:               eventRecorder,
		Indexer:                fieldIndexer,
		ResourceTemplateClient: resourceTemplateClient,
	}
	httpHandler := &http.Handler{
		Client:                 client,
		ResourceTemplateClient: resourceTemplateClient,
	}
	server := &webhook.Server{
		Config:        webhookConfig,
		Logger:        logrLogger,
		GithubHandler: handler,
		HTTPHandler:   httpHandler,
	}
	metricsServer := &metrics.Server{
		Logger: logrLogger,
	}
	mainManager, err := NewManager(manager, server, metricsServer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return mainManager, func() {
		cleanup2()
		cleanup()
	}, nil
}
