// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/tommy351/pullup/cmd"
	"github.com/tommy351/pullup/internal/controller"
	"github.com/tommy351/pullup/internal/controller/resourceset"
	"github.com/tommy351/pullup/internal/controller/resourcetemplate"
	"github.com/tommy351/pullup/internal/controller/trigger"
	"github.com/tommy351/pullup/internal/controller/webhook"
	"github.com/tommy351/pullup/internal/k8s"
	"github.com/tommy351/pullup/internal/log"
)

// Injectors from wire.go:

func InitializeManager(conf cmd.Config) (*Manager, func(), error) {
	config := cmd.NewKubernetesConfig(conf)
	restConfig, err := k8s.LoadConfig(config)
	if err != nil {
		return nil, nil, err
	}
	scheme, err := k8s.NewScheme()
	if err != nil {
		return nil, nil, err
	}
	encoderConfig := log.NewEncoderConfig()
	logConfig := cmd.NewLogConfig(conf)
	atomicLevel, err := log.NewZapLevel(logConfig)
	if err != nil {
		return nil, nil, err
	}
	encoder, err := log.NewEncoder(encoderConfig, atomicLevel)
	if err != nil {
		return nil, nil, err
	}
	writeSyncer, cleanup, err := log.NewSink()
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2 := log.NewZapLogger(encoder, atomicLevel, writeSyncer)
	logrLogger := log.NewLogger(logger)
	manager, err := NewControllerManager(restConfig, scheme, conf, logrLogger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	client := controller.NewClient(manager)
	resourcesetLogger := resourceset.NewLogger(logrLogger)
	eventRecorder := controller.NewEventRecorder(manager)
	reconciler := &resourceset.Reconciler{
		Client:   client,
		Logger:   resourcesetLogger,
		Recorder: eventRecorder,
	}
	webhookLogger := webhook.NewLogger(logrLogger)
	webhookReconciler := &webhook.Reconciler{
		Client:   client,
		Logger:   webhookLogger,
		Recorder: eventRecorder,
	}
	resourcetemplateLogger := resourcetemplate.NewLogger(logrLogger)
	reader := controller.NewAPIReader(manager)
	resourcetemplateReconciler := &resourcetemplate.Reconciler{
		Client:    client,
		Logger:    resourcetemplateLogger,
		Scheme:    scheme,
		Recorder:  eventRecorder,
		APIReader: reader,
	}
	triggerLogger := trigger.NewLogger(logrLogger)
	reconcilerConfig := trigger.ReconcilerConfig{
		Client:   client,
		Logger:   triggerLogger,
		Recorder: eventRecorder,
	}
	triggerReconciler, err := trigger.NewReconciler(reconcilerConfig, manager)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	mainManager, err := NewManager(manager, reconciler, webhookReconciler, resourcetemplateReconciler, triggerReconciler)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return mainManager, func() {
		cleanup2()
		cleanup()
	}, nil
}
