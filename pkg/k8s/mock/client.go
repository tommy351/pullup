// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/tommy351/pullup/pkg/apis/pullup/v1alpha1"
	externalversions "github.com/tommy351/pullup/pkg/client/informers/externalversions"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	dynamic "k8s.io/client-go/dynamic"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetWebhook mocks base method
func (m *MockClient) GetWebhook(ctx context.Context, name string) (*v1alpha1.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhook", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhook indicates an expected call of GetWebhook
func (mr *MockClientMockRecorder) GetWebhook(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*MockClient)(nil).GetWebhook), ctx, name)
}

// ApplyResourceSet mocks base method
func (m *MockClient) ApplyResourceSet(ctx context.Context, rs *v1alpha1.ResourceSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyResourceSet", ctx, rs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyResourceSet indicates an expected call of ApplyResourceSet
func (mr *MockClientMockRecorder) ApplyResourceSet(ctx, rs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyResourceSet", reflect.TypeOf((*MockClient)(nil).ApplyResourceSet), ctx, rs)
}

// DeleteResourceSet mocks base method
func (m *MockClient) DeleteResourceSet(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceSet", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceSet indicates an expected call of DeleteResourceSet
func (mr *MockClientMockRecorder) DeleteResourceSet(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceSet", reflect.TypeOf((*MockClient)(nil).DeleteResourceSet), ctx, name)
}

// NewInformer mocks base method
func (m *MockClient) NewInformer(ctx context.Context) externalversions.SharedInformerFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInformer", ctx)
	ret0, _ := ret[0].(externalversions.SharedInformerFactory)
	return ret0
}

// NewInformer indicates an expected call of NewInformer
func (mr *MockClientMockRecorder) NewInformer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInformer", reflect.TypeOf((*MockClient)(nil).NewInformer), ctx)
}

// NewDynamicInterface mocks base method
func (m *MockClient) NewDynamicInterface(ctx context.Context, gvr schema.GroupVersionResource) dynamic.ResourceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDynamicInterface", ctx, gvr)
	ret0, _ := ret[0].(dynamic.ResourceInterface)
	return ret0
}

// NewDynamicInterface indicates an expected call of NewDynamicInterface
func (mr *MockClientMockRecorder) NewDynamicInterface(ctx, gvr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDynamicInterface", reflect.TypeOf((*MockClient)(nil).NewDynamicInterface), ctx, gvr)
}
