/*
Copyright 2019 Jia-Huei Chen

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tommy351/pullup/pkg/apis/pullup/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceSetLister helps list ResourceSets.
// All objects returned here must be treated as read-only.
type ResourceSetLister interface {
	// List lists all ResourceSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceSet, err error)
	// ResourceSets returns an object that can list and get ResourceSets.
	ResourceSets(namespace string) ResourceSetNamespaceLister
	ResourceSetListerExpansion
}

// resourceSetLister implements the ResourceSetLister interface.
type resourceSetLister struct {
	indexer cache.Indexer
}

// NewResourceSetLister returns a new ResourceSetLister.
func NewResourceSetLister(indexer cache.Indexer) ResourceSetLister {
	return &resourceSetLister{indexer: indexer}
}

// List lists all ResourceSets in the indexer.
func (s *resourceSetLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceSet))
	})
	return ret, err
}

// ResourceSets returns an object that can list and get ResourceSets.
func (s *resourceSetLister) ResourceSets(namespace string) ResourceSetNamespaceLister {
	return resourceSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceSetNamespaceLister helps list and get ResourceSets.
// All objects returned here must be treated as read-only.
type ResourceSetNamespaceLister interface {
	// List lists all ResourceSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceSet, err error)
	// Get retrieves the ResourceSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResourceSet, error)
	ResourceSetNamespaceListerExpansion
}

// resourceSetNamespaceLister implements the ResourceSetNamespaceLister
// interface.
type resourceSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceSets in the indexer for a given namespace.
func (s resourceSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceSet))
	})
	return ret, err
}

// Get retrieves the ResourceSet from the indexer for a given namespace and name.
func (s resourceSetNamespaceLister) Get(name string) (*v1alpha1.ResourceSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourceset"), name)
	}
	return obj.(*v1alpha1.ResourceSet), nil
}
